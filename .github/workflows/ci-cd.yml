name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
      - name: Build and Test Backend
        run: mvn clean test package -DskipTests=false
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Build and Test Frontend
        working-directory: ./frontend
        run: |
          npm install
          npm run test -- --no-watch --code-coverage
          npm run build --prod
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: app-artifacts
          path: |
            target/*.jar
            frontend/dist/tp-app

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: app-artifacts
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push Docker Images
        run: |
          docker build -t yourusername/tp-backend:latest -f backend/Dockerfile ./backend
          docker build -t yourusername/tp-frontend:latest -f frontend/Dockerfile ./frontend
          docker push yourusername/tp-backend:latest
          docker push yourusername/tp-frontend:latest
      - name: Deploy to VPS
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
        run: |
          echo "$SSH_PRIVATE_KEY" > key.pem
          chmod 600 key.pem
          ssh -o StrictHostKeyChecking=no -i key.pem $VPS_USER@$VPS_HOST << 'EOF'
            docker-compose down
            docker-compose pull
            docker-compose up -d
          EOF
